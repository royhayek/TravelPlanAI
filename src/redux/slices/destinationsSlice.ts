import { createSelector, createSlice } from '@reduxjs/toolkit';
import { fetchDestinations } from '../actions/destinationActions';
import { fetchTravelDestinations } from '../actions/travelItineraryActions';
import { fetchTravelSummaryAndTips } from '../actions/travelSummaryAndTipsActions';
import { RootState } from 'app/store';

const initialState = {
  payload: {}, // Hold user input and preferences
  popularDestinations: null,
  destinations: null,
  summary: null,
  tips: null,
  isLoading: false, // Set to true while the request is being made
  error: null // Holds any error messages if the request fails
};

const destinationsSlice = createSlice({
  name: 'destinations',
  // Set the initial state of the slice
  initialState: initialState,
  // Define any reducers
  reducers: {
    setPayload: (state, action) => {
      state.payload = { ...state.payload, ...action.payload };
    },
    clearDestinations: (state) => {
      state.destinations = null;
    }
  },
  // Define the extra reducers to handle the different actions dispatched by the fetchTravelItinerary thunk
  extraReducers: (builder) => {
    builder.addCase(fetchDestinations.pending, (state) => {
      state.popularDestinations = null;
      state.isLoading = true;
      state.error = null;
    });
    builder.addCase(fetchDestinations.fulfilled, (state, action) => {
      state.popularDestinations = action.payload.data;
      state.isLoading = false;
      state.error = null;
    });
    builder.addCase(fetchDestinations.rejected, (state, action) => {
      state.popularDestinations = null;
      state.isLoading = false;
      state.error = action.error.message;
    });

    // When the thunk is pending, set isLoading to true and reset the error message
    builder.addCase(fetchTravelDestinations.pending, (state) => {
      state.destinations = null;
      state.isLoading = true;
      state.error = null;
    });
    // When the thunk is fulfilled, store the generated itinerary in the state and set isLoading to false
    builder.addCase(fetchTravelDestinations.fulfilled, (state, action) => {
      state.destinations = action.payload;
      state.isLoading = false;
      state.error = null;
    });
    // When the thunk is rejected, set itinerary to null, isLoading to false, and store the error message in the state
    builder.addCase(fetchTravelDestinations.rejected, (state, action) => {
      state.destinations = null;
      state.isLoading = false;
      state.error = action.error.message;
    });
    builder.addCase(fetchTravelSummaryAndTips.pending, (state) => {
      state.summary = null;
      state.tips = null;
      state.isLoading = true;
      state.error = null;
    });
    builder.addCase(fetchTravelSummaryAndTips.fulfilled, (state, action) => {
      state.summary = action.payload.summary;
      state.tips = action.payload.tips;
      state.isLoading = false;
      state.error = null;
    });
    builder.addCase(fetchTravelSummaryAndTips.rejected, (state, action) => {
      state.summary = null;
      state.tips = null;
      state.isLoading = false;
      state.error = action.error.message;
    });
  }
});

export const destinationsActions = destinationsSlice.actions;

// Export the reducer function generated by createSlice
export default destinationsSlice.reducer;

// ------------------------------------------------------------ //
// ------------------------ Selectors ------------------------- //
// ------------------------------------------------------------ //
const _destinations = (state: RootState) => state.destinations;

export const selectDestinations = createSelector(_destinations, (data) => data);

export const selectPopularDestinations = createSelector(_destinations, (data) => data?.popularDestinations);
