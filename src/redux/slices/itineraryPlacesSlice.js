import { createSlice } from '@reduxjs/toolkit';
import { fetchItineraryPlaces } from '../actions/itineraryPlacesActions';

const initialState = {
  places: null,
  isLoading: false, // Set to true while the request is being made
  error: null, // Holds any error messages if the request fails
};

const itineraryPlacesSlice = createSlice({
  name: 'itineraryPlaces',
  // Set the initial state of the slice
  initialState: initialState,
  // Define any reducers
  reducers: {},
  // Define the extra reducers to handle the different actions dispatched by the fetchTravelItinerary thunk
  extraReducers: builder => {
    // When the thunk is pending, set isLoading to true and reset the error message
    builder
      .addCase(fetchItineraryPlaces.pending, state => {
        state.places = null;
        state.isLoading = true;
        state.error = null;
      })
      // When the thunk is fulfilled, store the generated itinerary in the state and set isLoading to false
      .addCase(fetchItineraryPlaces.fulfilled, (state, action) => {
        state.places = action.payload;
        state.isLoading = false;
        state.error = null;
      })
      // When the thunk is rejected, set itinerary to null, isLoading to false, and store the error message in the state
      .addCase(fetchItineraryPlaces.rejected, (state, action) => {
        state.places = null;
        state.isLoading = false;
        state.error = action.error.message;
      });
  },
});

// Export the reducer function generated by createSlice
export default itineraryPlacesSlice.reducer;
