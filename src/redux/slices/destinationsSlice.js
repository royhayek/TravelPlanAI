import { createSlice } from '@reduxjs/toolkit';
import { fetchTravelDestinations } from '../actions/travelItineraryActions';
import { fetchTravelSummaryAndTips } from '../actions/travelSummaryAndTipsActions';

const initialState = {
  payload: null, // Hold user input and preferences
  destinations: null,
  summary: null,
  tips: null,
  isLoading: false, // Set to true while the request is being made
  error: null, // Holds any error messages if the request fails
};

const destinationsSlice = createSlice({
  name: 'destinations',
  // Set the initial state of the slice
  initialState: initialState,
  // Define any reducers
  reducers: {
    setPayload: (state, action) => {
      state.payload = { ...state.payload, ...action.payload };
    },
    clearDestinations: state => {
      state.destinations = null;
    },
  },
  // Define the extra reducers to handle the different actions dispatched by the fetchTravelItinerary thunk
  extraReducers: builder => {
    // When the thunk is pending, set isLoading to true and reset the error message
    builder
      .addCase(fetchTravelDestinations.pending, state => {
        state.destinations = null;
        state.isLoading = true;
        state.error = null;
      })
      // When the thunk is fulfilled, store the generated itinerary in the state and set isLoading to false
      .addCase(fetchTravelDestinations.fulfilled, (state, action) => {
        state.destinations = action.payload;
        state.isLoading = false;
        state.error = null;
      })
      // When the thunk is rejected, set itinerary to null, isLoading to false, and store the error message in the state
      .addCase(fetchTravelDestinations.rejected, (state, action) => {
        state.destinations = null;
        state.isLoading = false;
        state.error = action.error.message;
      })
      .addCase(fetchTravelSummaryAndTips.pending, state => {
        state.summary = null;
        state.tips = null;
        state.isLoading = true;
        state.error = null;
      })
      .addCase(fetchTravelSummaryAndTips.fulfilled, (state, action) => {
        state.summary = action.payload.summary;
        state.tips = action.payload.tips;
        state.isLoading = false;
        state.error = null;
      })
      .addCase(fetchTravelSummaryAndTips.rejected, (state, action) => {
        state.summary = null;
        state.tips = null;
        state.isLoading = false;
        state.error = action.error.message;
      });
  },
});

export const { setPayload, clearDestinations } = destinationsSlice.actions;

// Export the reducer function generated by createSlice
export default destinationsSlice.reducer;
